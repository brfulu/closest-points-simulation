{"version":3,"sources":["js/closest-points.js","js/closest-points-pure.js","js/index.js"],"names":["ClosestPoints","points","minDistance","pointA","pointB","Number","MAX_VALUE","i","length","j","distance","_getDistance","events","sort","a","b","x","pointsOrderedByX","slice","y","pointsOrderedByY","_closestPair","push","type","width","height","bruteResult","bruteForce","label","middleIndex","Math","floor","middlePoint","leftPoints","rightPoints","leftResult","rightResult","pointLeftA","pointLeftB","labelLeft","pointRightA","pointRightB","labelRight","combinedResult","strip","point","abs","max","min","stripResult","_getMinimumDistanceStrip","totalResult","first","second","sqrt","pow","d","result","test","closestPoints","ClosestPointsTest","smallArray","console","log","divideAndConquer","mediumArray","Array","from","random","bigArray","largeArray","canvas","document","getElementById","ctx","getContext","pointSize","clearButton","nextButton","backButton","startButton","eventIndex","closestDistance","drawOnClick","event","rect","getBoundingClientRect","clientX","left","clientY","top","drawPoint","save","beginPath","arc","PI","fillStyle","fill","strokeStyle","lineWidth","stroke","restore","drawLine","moveTo","lineTo","forEach","p","drawLabel","text","p1","p2","padding","t","alignment","dx","dy","textAlign","font","translate","rotate","atan2","fillText","highlightPoint","color","highlightRect","fillRect","strokeRect","clearCanvas","clearRect","style","display","next","backgroundColor","disabled","back","start","addEventListener"],"mappings":"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","file":"js.550e336c.map","sourceRoot":"..","sourcesContent":["export default class ClosestPoints {\r\n\r\n  constructor() { }\r\n\r\n  bruteForce(points) {\r\n    let minDistance = Number.MAX_VALUE;\r\n    let pointA, pointB;\r\n\r\n    for (let i = 0; i < points.length; i++) {\r\n      for (let j = i + 1; j < points.length; j++) {\r\n        let distance = this._getDistance(points[i], points[j]);\r\n        if (distance < minDistance) {\r\n          minDistance = distance;\r\n          pointA = points[i];\r\n          pointB = points[j];\r\n        }\r\n      }\r\n    }\r\n    return {\r\n      distance: minDistance,\r\n      pointA,\r\n      pointB\r\n    };\r\n  }\r\n\r\n  divideAndConquer(points) {\r\n    this.events = []\r\n    this.points = points;\r\n\r\n    points.sort((a, b) => a.x - b.x);\r\n    this.pointsOrderedByX = points.slice();\r\n\r\n    points.sort((a, b) => a.y - b.y);\r\n    this.pointsOrderedByY = points.slice();\r\n\r\n    let result = this._closestPair(this.pointsOrderedByX);\r\n    return {\r\n      distance: result.distance,\r\n      events: this.events\r\n    };\r\n  }\r\n\r\n  _closestPair(points) {\r\n    this.events.push({\r\n      type: 'highlightRect',\r\n      x: points[0].x - 6,\r\n      y: 0,\r\n      width: points[points.length - 1].x - points[0].x + 12,\r\n      height: 530\r\n    });\r\n\r\n    if (points.length <= 3) {\r\n      let bruteResult = this.bruteForce(points);\r\n      this.events.push({\r\n        type: 'drawLine',\r\n        pointA: bruteResult.pointA,\r\n        pointB: bruteResult.pointB,\r\n        label: 'd'\r\n      });\r\n      return bruteResult;\r\n    }\r\n\r\n    let middleIndex = Math.floor(points.length / 2);\r\n    let middlePoint = points[middleIndex];\r\n\r\n    let leftPoints = points.slice(0, middleIndex);\r\n    let rightPoints = points.slice(middleIndex);\r\n\r\n    let leftResult = this._closestPair(leftPoints);\r\n    let minDistanceLeft = leftResult.distance;\r\n\r\n    let rightResult = this._closestPair(rightPoints);\r\n    let minDistanceRight = rightResult.distance;\r\n\r\n    this.events.push({\r\n      type: 'highlightLeftRight',\r\n      x: points[0].x - 6,\r\n      y: 0,\r\n      width: points[points.length - 1].x - points[0].x + 12,\r\n      height: 530,\r\n      pointLeftA: leftResult.pointA,\r\n      pointLeftB: leftResult.pointB,\r\n      labelLeft: 'dl',\r\n      pointRightA: rightResult.pointA,\r\n      pointRightB: rightResult.pointB,\r\n      labelRight: 'dr'\r\n    });\r\n\r\n    let combinedResult = leftResult.distance < rightResult.distance ? leftResult : rightResult;\r\n\r\n    this.events.push({\r\n      type: 'combine',\r\n      x: points[0].x - 6,\r\n      y: 0,\r\n      width: points[points.length - 1].x - points[0].x + 12,\r\n      height: 530,\r\n      pointA: combinedResult.pointA,\r\n      pointB: combinedResult.pointB,\r\n      label: 'd'\r\n    });\r\n\r\n    let strip = [];\r\n    for (let i = 0; i < points.length; i++) {\r\n      let point = points[i];\r\n      if (Math.abs(point.x - middlePoint.x) <= combinedResult.distance && point.x >= points[0].x && point.x <= points[points.length - 1].x) {\r\n        strip.push(point);\r\n      }\r\n    }\r\n\r\n    this.events.push({\r\n      type: 'highlightStrip',\r\n      x: Math.max(points[0].x - 6, middlePoint.x - combinedResult.distance - 6),\r\n      y: 0,\r\n      width: Math.min(points[points.length - 1].x - Math.max(points[0].x, middlePoint.x - combinedResult.distance - 6), 2 * combinedResult.distance + 12),\r\n      height: 530,\r\n      pointA: combinedResult.pointA,\r\n      pointB: combinedResult.pointB\r\n    });\r\n\r\n    let stripResult = this._getMinimumDistanceStrip(strip, combinedResult.distance);\r\n    let totalResult = stripResult.distance < combinedResult.distance ? stripResult : combinedResult;\r\n\r\n    this.events.push({\r\n      type: (points.length == this.points.length ? 'highlightFinish' : 'highlightResult'),\r\n      x: points[0].x - 6,\r\n      y: 0,\r\n      width: points[points.length - 1].x - points[0].x + 12,\r\n      height: 530,\r\n      pointA: totalResult.pointA,\r\n      pointB: totalResult.pointB,\r\n      label: 'd'\r\n    });\r\n    return totalResult;\r\n  }\r\n\r\n  _getDistance(first, second) {\r\n    return Math.sqrt(Math.pow(first.x - second.x, 2) + Math.pow(first.y - second.y, 2));\r\n  }\r\n\r\n  _getMinimumDistanceStrip(strip, d) {\r\n    let minDistance = d;\r\n    let pointA, pointB;\r\n    for (let i = 0; i < strip.length; i++) {\r\n      for (let j = i + 1; j < strip.length && (strip[j].y - strip[i].y) < d; j++) {\r\n        if (this._getDistance(strip[i], strip[j]) < minDistance) {\r\n          minDistance = this._getDistance(strip[i], strip[j]);\r\n          pointA = strip[i];\r\n          pointB = strip[j];\r\n        }\r\n      }\r\n    }\r\n    return {\r\n      distance: minDistance,\r\n      pointA,\r\n      pointB\r\n    };\r\n  }\r\n}\r\n","export default class ClosestPoints {\r\n\r\n  constructor() { }\r\n\r\n  bruteForce(points) {\r\n    let minDistance = Number.MAX_VALUE;\r\n    let pointA, pointB;\r\n\r\n    for (let i = 0; i < points.length; i++) {\r\n      for (let j = i + 1; j < points.length; j++) {\r\n        let distance = this._getDistance(points[i], points[j]);\r\n        if (distance < minDistance) {\r\n          minDistance = distance;\r\n          pointA = points[i];\r\n          pointB = points[j];\r\n        }\r\n      }\r\n    }\r\n    return {\r\n      distance: minDistance,\r\n      pointA,\r\n      pointB\r\n    };\r\n  }\r\n\r\n  divideAndConquer(points) {\r\n    this.points = points;\r\n\r\n    points.sort((a, b) => a.x - b.x);\r\n    this.pointsOrderedByX = points.slice();\r\n\r\n    points.sort((a, b) => a.y - b.y);\r\n    this.pointsOrderedByY = points.slice();\r\n\r\n    let result = this._closestPair(this.pointsOrderedByX);\r\n    return {\r\n      distance: result.distance,\r\n      pointA: result.pointA,\r\n      pointB: result.pointB\r\n    };\r\n  }\r\n\r\n  _closestPair(points) {\r\n    if (points.length <= 3) {\r\n      let bruteResult = this.bruteForce(points);\r\n      return bruteResult;\r\n    }\r\n\r\n    let middleIndex = Math.floor(points.length / 2);\r\n    let middlePoint = points[middleIndex];\r\n\r\n    let leftPoints = points.slice(0, middleIndex);\r\n    let rightPoints = points.slice(middleIndex);\r\n\r\n    let leftResult = this._closestPair(leftPoints);\r\n    let rightResult = this._closestPair(rightPoints);\r\n    let combinedResult = leftResult.distance < rightResult.distance ? leftResult : rightResult;\r\n\r\n    let strip = [];\r\n    for (let i = 0; i < points.length; i++) {\r\n      let point = points[i];\r\n      if (Math.abs(point.x - middlePoint.x) <= combinedResult.distance && point.x >= points[0].x && point.x <= points[points.length - 1].x) {\r\n        strip.push(point);\r\n      }\r\n    }\r\n\r\n    let stripResult = this._getMinimumDistanceStrip(strip, combinedResult.distance);\r\n    let totalResult = stripResult.distance < combinedResult.distance ? stripResult : combinedResult;\r\n\r\n    return totalResult;\r\n  }\r\n\r\n  _getDistance(first, second) {\r\n    return Math.sqrt(Math.pow(first.x - second.x, 2) + Math.pow(first.y - second.y, 2));\r\n  }\r\n\r\n  _getMinimumDistanceStrip(strip, d) {\r\n    let minDistance = d;\r\n    let pointA, pointB;\r\n    for (let i = 0; i < strip.length; i++) {\r\n      for (let j = i + 1; j < strip.length && (strip[j].y - strip[i].y) < d; j++) {\r\n        if (this._getDistance(strip[i], strip[j]) < minDistance) {\r\n          minDistance = this._getDistance(strip[i], strip[j]);\r\n          pointA = strip[i];\r\n          pointB = strip[j];\r\n        }\r\n      }\r\n    }\r\n    return {\r\n      distance: minDistance,\r\n      pointA,\r\n      pointB\r\n    };\r\n  }\r\n}\r\n","'use strict';\r\n\r\nimport ClosestPoints from './closest-points';\r\n\r\nimport ClosestPointsTest from './closest-points-pure';\r\n\r\n\r\nfunction test() {\r\n  const closestPoints = new ClosestPointsTest();\r\n\r\n  const smallArray = [{ x: 2, y: 3 }, { x: 12, y: 30 }, { x: 40, y: 50 }, { x: 5, y: 1 }, { x: 12, y: 10 }, { x: 3, y: 4 }];\r\n  console.log('Small test:')\r\n  console.log(closestPoints.divideAndConquer(smallArray));\r\n  console.log(closestPoints.bruteForce(smallArray));\r\n\r\n  const mediumArray = Array.from({ length: 100 }, () => {\r\n    return {\r\n      x: Math.floor(Math.random() * 500),\r\n      y: Math.floor(Math.random() * 500)\r\n    };\r\n  });\r\n  console.log('Medium test:')\r\n  console.log(closestPoints.divideAndConquer(mediumArray));\r\n  console.log(closestPoints.bruteForce(mediumArray));\r\n\r\n  const bigArray = Array.from({ length: 10000 }, () => {\r\n    return {\r\n      x: Math.floor(Math.random() * 50000),\r\n      y: Math.floor(Math.random() * 50000)\r\n    };\r\n  });\r\n  console.log('Big test:')\r\n  console.log(closestPoints.divideAndConquer(bigArray));\r\n  console.log(closestPoints.bruteForce(bigArray));\r\n\r\n  const largeArray = Array.from({ length: 100000 }, () => {\r\n    return {\r\n      x: Math.random() * 500000,\r\n      y: Math.random() * 500000\r\n    };\r\n  });\r\n  console.log('Large test:')\r\n  console.log(closestPoints.divideAndConquer(largeArray));\r\n  console.log(closestPoints.bruteForce(largeArray));\r\n}\r\n\r\n// test();\r\n\r\n\r\n// Drawing\r\nconst canvas = document.getElementById('canvas');\r\nconst ctx = canvas.getContext('2d');\r\nconst pointSize = 7;\r\n\r\nconst clearButton = document.getElementById('clear');\r\nconst nextButton = document.getElementById('next');\r\nconst backButton = document.getElementById('back');\r\nconst startButton = document.getElementById('start');\r\n\r\nlet points = [];\r\nlet eventIndex = -1;\r\nlet events = [];\r\nlet closestDistance = 0;\r\n\r\nfunction drawOnClick(event) {\r\n  const rect = canvas.getBoundingClientRect();\r\n  const x = event.clientX - rect.left;\r\n  const y = event.clientY - rect.top;\r\n\r\n  drawPoint(x, y);\r\n  points.push({ x, y });\r\n}\r\n\r\nfunction drawPoint(x, y) {\r\n  ctx.save();\r\n  ctx.beginPath();\r\n  ctx.arc(x, y, pointSize, 0, Math.PI * 2, true);\r\n\r\n  ctx.fillStyle = \"#4E9AF1\";\r\n  ctx.fill();\r\n\r\n  ctx.strokeStyle = \"#000000\";\r\n  ctx.lineWidth = 2;\r\n  ctx.stroke();\r\n  ctx.restore();\r\n}\r\n\r\nfunction drawLine(a, b) {\r\n  ctx.save();\r\n\r\n  ctx.beginPath();\r\n  ctx.moveTo(a.x, a.y);\r\n  ctx.lineTo(b.x, b.y);\r\n  ctx.lineWidth = 2;\r\n  ctx.stroke();\r\n  ctx.restore();\r\n\r\n  points.forEach((p) => drawPoint(p.x, p.y));\r\n}\r\n\r\nfunction drawLabel(text, p1, p2, padding) {\r\n  if (p1.x > p2.x) {\r\n    let t = p1;\r\n    p1 = p2;\r\n    p2 = t;\r\n  }\r\n\r\n  let alignment = 'center';\r\n  let dx = p2.x - p1.x;\r\n  let dy = p2.y - p1.y;\r\n  let p = p1;\r\n  let pad = 1 / 2;\r\n\r\n  ctx.save();\r\n  ctx.textAlign = alignment;\r\n  ctx.fillStyle = '#0E0A19';\r\n  ctx.font = 'bold 17px Arial';\r\n  ctx.translate(p.x + dx * pad, p.y + dy * pad);\r\n  ctx.rotate(Math.atan2(dy, dx));\r\n  ctx.fillText(text, 0, 0);\r\n  ctx.restore();\r\n}\r\n\r\nfunction highlightPoint(x, y, color) {\r\n  ctx.save();\r\n  ctx.beginPath();\r\n  ctx.arc(x, y, pointSize, 0, Math.PI * 2, true);\r\n\r\n  ctx.fillStyle = \"#0000ff\";\r\n  ctx.fill();\r\n\r\n  ctx.strokeStyle = color;\r\n  ctx.lineWidth = 3;\r\n  ctx.stroke();\r\n  ctx.restore();\r\n}\r\n\r\nfunction highlightRect(x, y, width, height, color) {\r\n  ctx.save();\r\n  ctx.fillStyle = color;\r\n  ctx.fillRect(x, y, width, height);\r\n  ctx.strokeRect(x, y, width, height);\r\n  ctx.restore();\r\n  points.forEach((p) => drawPoint(p.x, p.y));\r\n}\r\n\r\nfunction clearCanvas() {\r\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n  points = [];\r\n  eventIndex = 0;\r\n  nextButton.style.display = 'none';\r\n  backButton.style.display = 'none';\r\n}\r\n\r\nfunction next() {\r\n  if (eventIndex < events.length - 1) {\r\n    if (eventIndex >= 0) {\r\n      let event = events[eventIndex];\r\n      if (event.type == 'highlightRect') {\r\n        highlightRect(event.x, event.y, event.width, event.height, '#C7C4C0');\r\n      } else if (event.type == 'highlightPoints') {\r\n        highlightPoint(event.pointA.x, event.pointA.y, '#00000');\r\n        highlightPoint(event.pointB.x, event.pointB.y, '#00000');\r\n      }\r\n    } else {\r\n      backButton.style.backgroundColor = '#4e9af1';\r\n      backButton.disabled = false;\r\n    }\r\n\r\n    eventIndex++;\r\n    let event = events[eventIndex];\r\n    if (event.type == 'highlightRect') {\r\n      highlightRect(event.x, event.y, event.width, event.height, '#fef36f');\r\n    } else if (event.type == 'drawLine') {\r\n      drawLine(event.pointA, event.pointB);\r\n      drawLabel(event.label, event.pointA, event.pointB);\r\n    } else if (event.type == 'highlightPoints') {\r\n      highlightPoint(event.pointA.x, event.pointA.y, '#ff0000');\r\n      highlightPoint(event.pointB.x, event.pointB.y, '#ff0000');\r\n    } else if (event.type == 'combine') {\r\n      highlightRect(event.x, event.y, event.width, event.height, '#fef36f');\r\n      drawLine(event.pointA, event.pointB);\r\n      drawLabel(event.label, event.pointA, event.pointB);\r\n    } else if (event.type == 'highlightStrip') {\r\n      highlightRect(event.x, event.y, event.width, event.height, '#4CAF50');\r\n      drawLine(event.pointA, event.pointB);\r\n    } else if (event.type == 'highlightResult') {\r\n      highlightRect(event.x, event.y, event.width, event.height, '#fef36f');\r\n      drawLine(event.pointA, event.pointB);\r\n      drawLabel(event.label, event.pointA, event.pointB);\r\n    } else if (event.type == 'highlightLeftRight') {\r\n      highlightRect(event.x, event.y, event.width, event.height, '#fef36f');\r\n      drawLine(event.pointLeftA, event.pointLeftB);\r\n      drawLabel(event.labelLeft, event.pointLeftA, event.pointLeftB);\r\n      drawLine(event.pointRightA, event.pointRightB);\r\n      drawLabel(event.labelRight, event.pointRightA, event.pointRightB);\r\n    } else if (event.type == 'highlightFinish') {\r\n      highlightRect(0, 0, 1024, 530, '#C7C4C0');\r\n      drawLine(event.pointA, event.pointB);\r\n      drawLabel(event.label, event.pointA, event.pointB);\r\n    }\r\n  }\r\n\r\n  if (eventIndex == events.length - 1) {\r\n    nextButton.disabled = true;\r\n    nextButton.style.backgroundColor = 'gray';\r\n    eventIndex++;\r\n  }\r\n}\r\n\r\nfunction back() {\r\n  if (eventIndex > 0) {\r\n    if (eventIndex < events.length) {\r\n      let event = events[eventIndex];\r\n      if (event.type == 'highlightRect') {\r\n        highlightRect(event.x, event.y, event.width, event.height, '#C7C4C0');\r\n      } else if (event.type == 'highlightPoints') {\r\n        highlightPoint(event.pointA.x, event.pointA.y, '#00000');\r\n        highlightPoint(event.pointB.x, event.pointB.y, '#00000');\r\n      }\r\n    } else {\r\n      nextButton.style.backgroundColor = '#4e9af1';\r\n      nextButton.disabled = false;\r\n    }\r\n\r\n    eventIndex--;\r\n    let event = events[eventIndex];\r\n    if (event.type == 'highlightRect') {\r\n      highlightRect(event.x, event.y, event.width, event.height, '#fef36f');\r\n    } else if (event.type == 'drawLine') {\r\n      drawLine(event.pointA, event.pointB);\r\n      drawLabel(event.label, event.pointA, event.pointB);\r\n    } else if (event.type == 'highlightPoints') {\r\n      highlightPoint(event.pointA.x, event.pointA.y, '#ff0000');\r\n      highlightPoint(event.pointB.x, event.pointB.y, '#ff0000');\r\n    } else if (event.type == 'combine') {\r\n      highlightRect(event.x, event.y, event.width, event.height, '#fef36f');\r\n      drawLine(event.pointA, event.pointB);\r\n      drawLabel(event.label, event.pointA, event.pointB);\r\n    } else if (event.type == 'highlightStrip') {\r\n      highlightRect(event.x, event.y, event.width, event.height, '#4CAF50');\r\n      drawLine(event.pointA, event.pointB);\r\n    } else if (event.type == 'highlightResult') {\r\n      highlightRect(event.x, event.y, event.width, event.height, '#fef36f');\r\n      drawLine(event.pointA, event.pointB);\r\n      drawLabel(event.label, event.pointA, event.pointB);\r\n    } else if (event.type == 'highlightLeftRight') {\r\n      highlightRect(event.x, event.y, event.width, event.height, '#fef36f');\r\n      drawLine(event.pointLeftA, event.pointLeftB);\r\n      drawLabel(event.labelLeft, event.pointLeftA, event.pointLeftB);\r\n      drawLine(event.pointRightA, event.pointRightB);\r\n      drawLabel(event.labelRight, event.pointRightA, event.pointRightB);\r\n    } else if (event.type == 'highlightFinish') {\r\n      highlightRect(0, 0, 1024, 530, '#C7C4C0');\r\n      drawLine(event.pointA, event.pointB);\r\n      drawLabel(event.label, event.pointA, event.pointB);\r\n    }\r\n  } else {\r\n    backButton.disabled = true;\r\n    backButton.style.backgroundColor = 'gray';\r\n  }\r\n}\r\n\r\nfunction start() {\r\n  eventIndex = -1\r\n  events = [];\r\n  let closestPoints = new ClosestPoints();\r\n  let result = closestPoints.divideAndConquer(points);\r\n  closestDistance = result.distance;\r\n  events = result.events;\r\n  nextButton.style.display = 'inline';\r\n  backButton.style.display = 'inline';\r\n  backButton.disabled = true;\r\n  backButton.style.backgroundColor = 'gray';\r\n  nextButton.style.backgroundColor = '#4e9af1';\r\n  nextButton.disabled = false;\r\n}\r\n\r\ncanvas.addEventListener('click', drawOnClick);\r\nclearButton.addEventListener('click', clearCanvas);\r\nnextButton.addEventListener('click', next);\r\nbackButton.addEventListener('click', back);\r\nstartButton.addEventListener('click', start);\r\n\r\n\r\n"]}